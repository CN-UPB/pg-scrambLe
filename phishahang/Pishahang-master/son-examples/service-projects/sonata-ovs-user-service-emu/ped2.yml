---
#
# This is an example for a profiling experiment descriptor (PED).
# It defines profiling experiments for the sonata-fw-vtc-service-emu example service.
#
descriptor_version: 0.1
# SONATA-like identifier (just in case we need it)
vendor: "eu.sonata-nfv"
name: "ovs-profile-experiment"
version: "0.1"
author: "Manuel Peuster, Paderborn University, manuel.peuster@uni-paderborn.de"
description: "This is an example profiling experiment descriptor (PED)."

# path to the package of the service we want to profile
service_package: "./sonata-fw-vtc-service.son"

#
# First type of experiments: Service level experiments
#
service_experiments:
  - name: "service_throughput"
    description: "iperf test for entire service"
    repetitions: 1
    time_limit: "20"
    # NSD to be used (SONATA-like vendor.name.version reference)
    service: "eu.sonata-nfv.sonata-fw-vtc-service.0.1"
    # additional containers for traffic generation/measurements (like SAPs)
    measurement_points:
      - name: "ns_port1"
        connection_point: "ns:servicein"
        container: "sonata-son-emu-sap:latest"
        configuration:
          - "ethtool -K port1 tx off"
        cmd: 'python iperf_server.py "-s -i1 -fm"'
        cmd_order: 1
      - name: "ns_port0"
        connection_point: "ns:serviceout"
        container: "sonata-son-emu-sap:latest"
        configuration:
          - "ethtool -K port0 tx off"
        cmd: 'iperf -c 205.0.0.2 -t999'
        cmd_order: 2
    input_metrics: "msd_input.yml"
    output_metrics: "msd_output2.yml"
    # resource configurations to be tested during profiling run (defined per VNF)
    resource_limitations:
      # again: SONATA-like references
      - function: "ovs1"
        cpu_bw: "${0.4 to 0.8 step 0.1}"
        cpu_cores: 1
        #mem_limit: "${256, 512}m"
        mem_limit: 256m
      - function: "ns_port0"
        cpu_bw: 0.2
        cpu_cores: 1
        mem_limit: 512m
      - function: "ns_port1"
        cpu_bw: 0.2
        cpu_cores: 1
        mem_limit: 512m


#
# Second type of experiments: VNF level experiments (individually test each VNF)
#
function_experiments:
  - name: "func_fw_throughput"
    description: "iperf test for fw vnf"
    repetitions: 2
    time_limit: "120"
    # VNFD to be used (SONATA-like vendor.name.version reference)
    function: "eu.sonata-nfv.fw-vnf.0.1"
    # additional containers for traffic generation/measurements (like SAPs)
    measurement_points:
      - name: "mp.output"
        connection_point: "fwout"
        container: "sonata-son-emu-sap:latest"
        cmd: "iperf -s"
      - name: "mp.input"
        connection_point: "fwin"
        container: "sonata-son-emu-sap:latest"
        cmd: "iperf -c 1.1.1.1 -t 120"
    # resource configurations to be tested during profiling run (defined per VNF)
    resource_limitations:  # shortened (fields are optional)
      # again: SONATA-like references
      - function: "eu.sonata-nfv.fw-vnf.0.1"
        cpu_bw: "${0.01 to 0.03 step 0.01}" # Omnet++ style parameter study macros
      - function: "mp.input"
        cpu_bw: 0.2
      - function: "mp.output"
        cpu_bw: 0.2
  - name: "func_vtc_throughput"
    description: "iperf test for vtc vnf"
    repetitions: 1
    time_limit: "120"
    # VNFD to be used (SONATA-like vendor.name.version reference)
    function: "eu.sonata-nfv.vtc-vnf.0.1"
    # additional containers for traffic generation/measurements (like SAPs)
    measurement_points:
      - name: "mp.output"
        connection_point: "output"
        container: "sonata-son-emu-sap:latest"
        cmd_start: "iperf -s"
        cmd_stop: null
      - name: "mp.input"
        connection_point: "input"
        container: "sonata-son-emu-sap:latest"
        cmd_start: "iperf -c 1.1.1.1 -t 120"
        cmd_stop: null
    # resource configurations to be tested during profiling run (defined per VNF)
    resource_limitations: # shortened (fields are optional)
      # again: SONATA-like references
      - function: "eu.sonata-nfv.vtc-vnf.0.1"
        cpu_bw: 0.4
        mem_max: "${64}"
      - function: "mp.input"
        cpu_bw: 0.2
        mem_max: "${16 to 18}"
      - function: "mp.output"
        cpu_bw: 0.2
        mem_max: 512



