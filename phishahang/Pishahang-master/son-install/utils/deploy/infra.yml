---

- name: deploy Infrastructure resources for specific environments
  hosts: localhost
  become: false
  connection: local
  vars:
    localhome: "{{ lookup('env','PWD') }}"
    vm_distro: "{{ distro }}"
  vars_files:
    - "{{ localhome }}/roles/{{ plat }}/vars/os_{{ pop }}_{{ proj }}_{{ distro }}.yml"
    - "{{ localhome }}/roles/{{ plat }}/vars/main.yml"

  tasks:

#    - include_vars: "{{ localhome }}/environments/{{ plat }}/group_vars/os_{{ pop }}_{{ proj }}_{{ distro }}.yml"

    - name: launch 'N' instances
      os_server:
        # http://docs.openstack.org/developer/os-client-config/
        cloud: "os_{{ pop }}_{{ proj }}"
        name: "{{ item.name }}"
        state: present
        key_name: "{{ item.key }}"
        availability_zone: "{{ item.availability_zone }}"
        security_groups: "{{ security_groups }}"
        nics: "{{ item.nics }}"
        image: "{{ item.image }}"
        flavor: "{{ item.flavor }}"
        timeout: 360
        wait: yes
      with_items: "{{ servers }}"
      register: "os_hosts"

    - name: create IN-MEMORY Inventory # temporary in-memory group of hosts that only persists until the end of the playbook
      add_host:
        name: "{{ item.openstack.name }}"
        groups: "{{ item.item.meta.group }}"
        ansible_host: "{{ item.openstack.accessIPv4 }}"
      with_items: "{{ os_hosts.results }}"

    - name: create STATIC Inventory based on a provided Template ['jinja2'](http://docs.ansible.com/ansible/template_module.html)
      template: 
        src: ansible_inventory.j2
        dest: "{{ lookup('env','PWD') }}/environments/{{ plat }}/hosts"
        owner: "{{ lookup('env','USER') }}"
        group: "{{ lookup('env','USER') }}"
        mode: 0644

    - name: Add STATIC mappings to /etc/hosts
      become: true
      template: 
        src: etc_hosts.j2
        dest: /etc/hosts
        owner: "{{ lookup('env','USER') }}"
        group: "{{ lookup('env','USER') }}"
        mode: 0644

    - name: WAIT the SSH port listening at the new deployed instance
      command: >
        ssh -oControlMaster=auto -oControlPersist=60s -oUserKnownHostsFile=/dev/null -oBatchMode=yes -oStrictHostKeyChecking=no -i ~/.ssh/{{ item.openstack.key_name }}.pem -l {{ vm_user }} {{ item.openstack.accessIPv4 }} true
      register: result
      until: result|success
      retries: 20
      delay: 10
      with_items: "{{ os_hosts.results }}"

