---
# tasks file for vprx

- name: load variables per Site, Tenant and Distro
  include_vars:
    dir: "roles/vprx/vars"
    files_matching: "os_{{ pop }}_{{ proj }}.yml"

- name: launch a new Instance(s)
  os_server:
    # http://docs.openstack.org/developer/os-client-config/
    state: present
    cloud: "os_{{ pop }}_{{ proj }}"
    name: "{{ pop }}-{{ proj }}-vprx-{{ item }}-{{ ansible_date_time.epoch }}"
    image: "{{ image }}"
    key_name: "{{ key_name }}"
    flavor: "{{ flavor }}"
    availability_zone: "{{ availability_zone }}"
    security_groups: "{{ security_groups }}"
    meta:
      hostname: "vprx-{{ item }}-{{ ansible_date_time.epoch }}"
      group: "vpsa"
    timeout: 360
    wait: yes
  with_sequence: "start=1 end={{ nbofvms | default(1) }} format=%02x"
  register: "newvm"

- debug:
    var: newvm

- name: create IN-MEMORY Inventory # temporary in-memory group of hosts that only persists until the end of the playbook
  add_host:
    name: "{{ item.openstack.name }}"
    groups: "{{ item.openstack.metadata.group }}"
    ansible_host: "{{ item.openstack.accessIPv4 }}"
  with_items: "{{ newvm.results }}"

- name: ensures dir exists
  file:
    path: "{{ lookup('env','PWD') }}/group_vars/vpsa"
    state: directory
    recurse: yes
    owner: "{{ lookup('env','USER') }}"
    group: "{{ lookup('env','USER') }}"
    mode: 0755

- name: create STATIC Inventory based on a provided Template ['jinja2']
  # http://docs.ansible.com/ansible/template_module.html
  template:
    src: dynamic_group_vars.j2
    dest: "{{ lookup('env','PWD') }}/group_vars/vpsa/hosts"

- name: Add STATIC mappings to /etc/hosts
  become: true
  template:
    src: etc_hosts.j2
    dest: /etc/hosts
    owner: "{{ lookup('env','USER') }}"
    group: "{{ lookup('env','USER') }}"
    mode: 0644

- name: WAIT the SSH port listening at the new deployed instance
  command: >
    ssh -oControlMaster=auto -oControlPersist=60s -oUserKnownHostsFile=/dev/null -oBatchMode=yes -oStrictHostKeyChecking=no -i ~/.ssh/{{ item.openstack.key_name }}.pem -l {{ vm_user }} {{ item.openstack.accessIPv4 }} true
  register: result
  until: result|success
  retries: 20
  delay: 10
  with_items: "{{ newvm.results }}"

